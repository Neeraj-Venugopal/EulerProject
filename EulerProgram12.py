'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import time


def factors(number):
    counter = 0
    for i in range(1, int(number ** 0.5)+1):
        if number % i == 0:
            counter += 2

    # p * q = n, if I find p then, n / p = q, will also be a factor.
    # Example, say number = 6, square root of 6 = 2
    # Factors according to loop are 1 and 2
    # For each loop counter is incremented twice, because
    # 1 * 6, 6 * 1 and 2 * 3, 3 * 2.. Hence the count is 4

    num = number ** 0.5
    if num * num == number:         # if p * q = n where p = q, so eliminating that counter
        counter -= 1

    return counter


if __name__ == '__main__':
    startTime = time.time()
    triangle = 1
    num2 = 2

    while True:
        triangle += num2
        num2 += 1
        count = factors(triangle)

        if count > 500:
            print triangle, "\t", count
            break

    endTime = time.time()
    print "Total Time: ", endTime - startTime
